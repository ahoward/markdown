#! /usr/bin/env ruby
# encoding: utf-8
#
#
# NAME 
#   markup
#
# DESCRIPTION
#   markdown and syntax highlight files 
#
# USAGE
#   markdown README.md README.html
#
#   markdown README.md > README.html
#
#   cat article.txt | sed 's/python/ruby/g' | markdown > out
#
# OPTIONS
#
#   --preview, -p
#
#     inline css and a meta refresh tag for live preview in your browser
#   

  preview = ARGV.delete('--preview') || ARGV.delete('-p')
 
  input = ARGV.shift || '/dev/stdin'
  output = ARGV.shift || '/dev/stdout'

  raw = open(input){|fd| fd.read} 

  html = markdown(raw)

  if preview
    html = <<-__
      <style>
        #{ DATA.read }
      </style>

      <meta http-equiv="refresh" content="1">

      #{ html }
    __
  end

  open(output, 'w'){|fd| fd.write(html)}






BEGIN {
  require 'rubygems'
  require 'redcarpet'
  require 'albino'

  class SyntaxHighlighting < Redcarpet::Render::HTML
    def block_code(code, language)
      language = 'ruby' if language.to_s.strip.empty?
      Albino.colorize(code, language)
    end
  end

  def markdown(*args, &block)
    @markdown ||=
      Redcarpet::Markdown.new(
        SyntaxHighlighting,

        :no_intra_emphasis   => true,
        :tables              => true,
        :fenced_code_blocks  => true,
        :autolink            => true,
        :strikethrough       => true,
        :lax_html_blocks     => true,
        :space_after_headers => true,
        :superscript         => true
      )

    if args.empty? and block.nil?
      @markdown
    else
      @markdown.render(*args, &block).strip
    end
  end
}



__END__

/* 
   Some simple Github-like styles, with syntax highlighting CSS via Pygments.
*/
body{
        font-family: helvetica, arial, freesans, clean, sans-serif;
        color: #333;
        background-color: #fff;
        border: none;
        line-height: 1.5;
        margin: 2em 3em;
        text-align:left;
}
pre{
        background-color: #f7f7f7;
        padding: 10px;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        overflow: auto;
}
code{
        background-color: #f7f7f7;
        padding: 1px 3px;
        -webkit-border-radius: 2px;
        -moz-border-radius: 2px;
        border-radius: 2px;     
}
li p{
        margin: 0.3em;
}
li{
        list-style-type: disc;
}
a:link, a:visited{
        color: #33e;
        text-decoration: none;
}
a:hover{
        color: #00f;
        text-shadow:1px 1px 2px #ccf;
        text-decoration:underline;
}
h1{
        color: #999;
        font-weight: bold;
}
h2{
        border-bottom: 1px dotted #aaa;
        margin-bottom: 1em;
        color: #333;
}
h3{
        color: #666;
}
.shadow{
        -webkit-box-shadow:0 5px 15px #000;
        -moz-box-shadow:0 5px 15px #000;
        box-shadow:0 5px 15px #000;             
}


.hll { background-color: #ffffff }
.c { color: #888888; font-style: italic } /* Comment */
.err { color: #a61717; background-color: #e3d2d2 } /* Error */
.k { color: #000000; font-weight: bold } /* Keyword */
.cm { color: #888888 } /* Comment.Multiline */
.cp { color: #cc0000; font-weight: bold } /* Comment.Preproc */
.c1 { color: #888888 } /* Comment.Single */
.cs { color: #cc0000; font-weight: bold; background-color: #fff0f0 } /* Comment.Special */
.gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */
.ge { font-style: italic } /* Generic.Emph */
.gr { color: #aa0000 } /* Generic.Error */
.gh { color: #303030 } /* Generic.Heading */
.gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */
.go { color: #888888 } /* Generic.Output */
.gp { color: #555555 } /* Generic.Prompt */
.gs { font-weight: bold } /* Generic.Strong */
.gu { color: #606060 } /* Generic.Subheading */
.gt { color: #aa0000 } /* Generic.Traceback */
.highlight .kc{font-weight:bold;} /* Keyword.Constant */
.highlight .kd{font-weight:bold;} /* Keyword.Declaration */
.highlight .kn{font-weight:bold;} /* Keyword.Namespace */
.highlight .kp{font-weight:bold;} /* Keyword.Pseudo */
.highlight .kr{font-weight:bold;} /* Keyword.Reserved */
.highlight .kt{color:#458;font-weight:bold;} /* Keyword.Type */
.m { color: #0000DD; font-weight: bold } /* Literal.Number */
.s { color: #dd2200; background-color: #fff0f0 } /* Literal.String */
.highlight .na{color:#008080;} /* Name.Attribute */
.highlight .nb{color:#0086B3;} /* Name.Builtin */
.highlight .nc{color:#458;font-weight:bold;} /* Name.Class */
.highlight .no{color:#008080;} /* Name.Constant */
.highlight .ni{color:#800080;} 
.highlight .ne{color:#900;font-weight:bold;} /* Name.Exception */
.highlight .nf{color:#900;font-weight:bold;} /* Name.Function */
.highlight .nn{color:#005;font-weight:bold;} /* Name.Namespace */
.highlight .nt{color:#000080;} /* Name.Tag */
.highlight .nv{color:#008080;} /* Name.Variable */
.py { color: #336699; font-weight: bold } /* Name.Property */
.ow { color: #008800 } /* Operator.Word */
.w { color: #bbbbbb } /* Text.Whitespace */
.mf { color: #0000DD; font-weight: bold } /* Literal.Number.Float */
.mh { color: #0000DD; font-weight: bold } /* Literal.Number.Hex */
.highlight .mi {color:#099;} /* Literal.Number.Integer */
.mo { color: #0000DD; font-weight: bold } /* Literal.Number.Oct */
.sb { color: #dd2200; background-color: #fff0f0 } /* Literal.String.Backtick */
.highlight .sc{color:#d14;} /* Literal.String.Char */
.sd { color: #dd2200; background-color: #fff0f0 } /* Literal.String.Doc */
.highlight .s2{color:#d14;} /* Literal.String.Double */
.highlight .se{color:#d14;} /* Literal.String.Escape */
.highlight .sh{color:#d14;} /* Literal.String.Heredoc */
.highlight .si{color:#d14;} /* Literal.String.Interpol */
.highlight .sx{color:#d14;} /* Literal.String.Other */
.highlight .sr{color:#d14;} /* Literal.String.Regex */
.highlight .s1{color:#d14;} /* Literal.String.Single */
.highlight .ss{color:#d14;} /* Literal.String.Symbol */
.bp { color: #003388 } /* Name.Builtin.Pseudo */
.vc { color: #336699 } /* Name.Variable.Class */
.vg { color: #dd7700 } /* Name.Variable.Global */
.vi { color: #3333bb } /* Name.Variable.Instance */
.il { color: #0000DD; font-weight: bold } /* Literal.Number.Integer.Long */
